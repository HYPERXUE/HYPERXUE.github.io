<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>thinkjs-note</title>
      <link href="/2021/02/26/thinkjs-note/"/>
      <url>/2021/02/26/thinkjs-note/</url>
      
        <content type="html"><![CDATA[<h1 id="thinkjs-的基本梳理"><a href="#thinkjs-的基本梳理" class="headerlink" title="thinkjs 的基本梳理"></a>thinkjs 的基本梳理</h1><p>最开始加载<br>node_modules种Thinkjs模块lib-&gt;loader.js<br>loadData() {<br>    // add data to koa application<br>    think.app.modules = think.loader.modules;<br>    think.app.models = think.loader.loadModel();<br>    think.app.services = think.loader.loadService();<br>    think.app.logics = think.loader.loadLogic();<br>    think.app.controllers = think.loader.loadController();<br>    think.app.routers = think.loader.loadRouter();<br>    think.app.validators = think.loader.loadValidator();<br>  }<br>调用加载各种模块<br>Think-loader模块-&gt;index.js-&gt;loaderlogic()<br>logic -&gt;loader.js-&gt;commom.js加载文件（<br>CommonLoader.loadFiles循环加载所有admin/logic下的）<br>（CommonLoader.loadFiles循环加载所有api/logic下的）<br>所有东西存放在cache，</p><h2 id="分析url链接"><a href="#分析url链接" class="headerlink" title="分析url链接"></a>分析url链接</h2><p>Middleware.js分析url链接<br>this.parse(middlewares, this.loadFiles(appPath, modules.length), app);<br>think-router.js<br>parseController<br>分析链接分为controller, pathname<br>分析请求行为<br>parseAction({ pathname, ruleMethod })<br>get or set query data<br>nideshop-master\node_modules\parseurl\index.js<br>这个文件parseurl分析小程序URL链接 req.url<br>req.<em>parsedUrl<br>中的<br>raw:’/api/brand/detail?id=1001000’<br>auth:null<br>hash:null<br>host:null<br>hostname:null<br>href:’/api/brand/detail?id=1001000’<br>path:’/api/brand/detail?id=1001000’<br>pathname:’/api/brand/detail’<br>port:null<br>protocol:null<br>query:’id=1001000’<br>search:’?id=1001000’<br>slashes:null<br><em>_proto</em></em>:Object</p><p>/**</p><ul><li><p>Get parsed query-string.</p></li><li></li><li><p>@return {Object}</p></li><li><p>@api public</p></li><li><p>/</p><p>get query() {<br>const str = this.querystring;  ID值<br>const c = this._querycache = this._querycache || {};<br>return c[str] || (c[str] = qs.parse(str));<br>},<br>nideshop-master\node_modules\koa\lib\request.js<br>_http_commom.js 就是nodejs 的http<br>Parser(common.js) 继承自 HTTPParser（node_http_parser.cc），并绑定了4个解析周期回调函数：parserOnHeaders、parserOnHeadersComplete、parserOnBody、parserOnMessageComplete<br>在执行 parser.execute 过程中，HTTPParser 会在解析周期内回调这些函数。<br>TCP数据到达时， 先执行execute()<br>当 http_parser.c 解析到 on_headers_complete 时，执行HTTP_CB(on_headers_complete)回调<br>完整的http请求是这样的：<br>•    客户端发起HTTP请求，首先触发Server端的connection事件，建立TCP链接。<br>•    Server接收到connection事件后，建立TCP连接，并暴露出套接字，通过套接字监听’data’事件；初始化http-parser，为后续解析数据备用。<br>•    HTTP请求数据到达Server端，parser执行execute方法进行解析，请求头解析成功后，通过回调触发request事件。<br>•    至此，我们在Server回调函数中，就接收到了此次http请求的request</p></li></ul><p>所有的项目config都最后会合并在一起然后加载<br>框架默认的配置 -&gt; 项目模式下框架配置 -&gt; 项目公共配置 -&gt; 项目模式下的公共配置 -&gt; 模块下的配置<br>前两个可以忽略掉，那是 thinkjs 框架自身的配置设置，通常里面不会有我们项目会用到的配置参数。<br>第三个和第四个则是在不同的项目创建模式<br>normal mode<br>thinkjs_normal/src/config/*<br>module mode<br>thinkjs_module/src/common/config/*<br>在nideshop 设置了publicController<br>在访问时会判断是否未需要登录去访问的模块</p><h2 id="数据库查询"><a href="#数据库查询" class="headerlink" title="数据库查询"></a>数据库查询</h2><p>在每一个controller里面，因为继承的是model<br>例如<br>Var _this=that;<br>yield model.field([‘id’, ‘name’, ‘floor_price’, ‘app_list_pic_url’]).page(_this.get(‘page’) || 1, _this.get(‘size’) || 10).countSelect();</p><p>这里对数据库的操作就是通过这个model.field(string) string就是要查询的数据库字段。<br>Return(this);设置后会赋值到 this.options.field 属性上。<br>Model.page(page,pagesize)<br>Page:设置当前页数，size就是每页的条数。<br>最终其实就是解释到变成sql中limit中的参数。<br>设置 SQL 语句里的 limit，会赋值到 this.options.limit 属性上，便于后续解析。<br>所以model中的方法有一些就是赋值到option上然后通过conuselect来分析然后countselect会调用parseoptions来分析 option值<br>就能得到数据库中的数据，<br>最后调用module.success = this.success(data)返回发送数据，然后就是加入队列返回发送。</p>]]></content>
      
      
      
        <tags>
            
            <tag> thinkjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>md-rule</title>
      <link href="/2021/02/14/md-rule/"/>
      <url>/2021/02/14/md-rule/</url>
      
        <content type="html"><![CDATA[<h1 id="标题等级"><a href="#标题等级" class="headerlink" title="标题等级"></a>标题等级</h1><p>前面带一个’#’，有多少个’#’代表多少级标题，最多到H6<br>‘#’后要带一个空格。并且H1下会带一条下划线</p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>列表分为有序列表与无序列表</p><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>通过用’*’,’+’,’-‘来创建都是一个效用生成一个’.’</p><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>使用’数字.’</p><h1 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h1><p>使用’&gt;’</p><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>分割线可以由* - _（星号，减号，底线）这3个符号的至少3个符号表示（期中一种3个），注意至少要3个，且不需要连续，有空格也可以</p><h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><p>[内容]（地址）</p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>[内容]（地址）</p><h1 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h1><p>单行：使用 ``括住<br>多行：用<code>内容</code></p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><table><thead><tr><th>表态1</th><th>表头2</th></tr></thead><tbody><tr><td>contnet cell</td><td>content cell</td></tr><tr><td>注意就是——就是下划线</td><td></td></tr><tr><td># 强调</td><td></td></tr><tr><td>加粗：两个星号或两个下划线包住</td><td></td></tr><tr><td>斜体：一个星号或一个下划线包住</td><td></td></tr></tbody></table><h1 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h1><p>双斜杠=<br>但斜杠<code>=</code></p><h1 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h1><p>使用~~包住</p>]]></content>
      
      
      
        <tags>
            
            <tag> md </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>与HEOX相关的操作</title>
      <link href="/2021/02/14/refer-hexo/"/>
      <url>/2021/02/14/refer-hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo指令"><a href="#hexo指令" class="headerlink" title="hexo指令"></a>hexo指令</h1><p>hexo clean<br>hexo g<br>hexo d</p><h1 id="NPM管理nodejs版本"><a href="#NPM管理nodejs版本" class="headerlink" title="NPM管理nodejs版本"></a>NPM管理nodejs版本</h1><p>如果系统安装多个node并且都不在同一个路径，选择运行哪个版本的node可以采用全局安装版本管理器n<br>npm install -g n<br>直接 n 选择版本</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot+mybatis and WX小程序</title>
      <link href="/2020/05/01/spbootnote/"/>
      <url>/2020/05/01/spbootnote/</url>
      
        <content type="html"><![CDATA[<h1 id="WX-promaster-program-springboot后台"><a href="#WX-promaster-program-springboot后台" class="headerlink" title="WX-promaster program(springboot后台)"></a>WX-promaster program(springboot后台)</h1><p>在慕课网上看到的教程，跟着配置的相关项目，实现后台的基本功能。</p><h2 id="项目的基本结构"><a href="#项目的基本结构" class="headerlink" title="项目的基本结构"></a>项目的基本结构</h2><p>Pom.xml:项目依赖配置<br>Resource文件夹:资源文件（相关配置 ）<br>Application.properties：springboot配置文件服务器，profile，日志，tomcat服务器等配置<br>使用mybatis还要建立一个mybatis-config.xml文件。在resource建立相关mapper对应关系。</p><h2 id="项目java-project-confighex"><a href="#项目java-project-confighex" class="headerlink" title="项目java/project/confighex"></a>项目java/project/confighex</h2><p>文件夹下的内容是mybatis和spring的服务配置.<br>DAO层的配置<br>DataSourceConfigration：配置的是jdbc（数据库）相关的值 变量都是从application.properties中获取的。<br>SessionFactoryConfigration：SqlSessionFactory 有一个唯一的必要属性：用于 JDBC 的 DataSource。<br>service层：spring的事务管理。当我们使用了spring-boot-starter-jdbc依赖的时候，框 架会自动默认注入DataSourceTransactionManager。所以我们不需要任何额外 配置就可以用@Transactional注解进行事务的使用。<br>通过使用@Autowired    private DataSource dataSource;把DataSourceConfigration配置的jdbc属性装配进去然后加入<br>Autowired是根据类型（byType）进行自动装配的。注意:com.mchange.v2.c3p0.ComboPooledDataSource是继承DataSource<br>多个 bean 时，是根据 Student 的变量名自动匹配 bean id！</p><h2 id="具体底层的实现"><a href="#具体底层的实现" class="headerlink" title="具体底层的实现"></a>具体底层的实现</h2><p>dao：areadao 操作数据库的接口 通过MAPPER文件AreaDao.xml映射实现。<br>entity：应用层实现的方法</p>]]></content>
      
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly_Note</title>
      <link href="/2020/01/19/bflynote/"/>
      <url>/2020/01/19/bflynote/</url>
      
        <content type="html"><![CDATA[<h1 id="BUTTERFLY-NOTE"><a href="#BUTTERFLY-NOTE" class="headerlink" title="BUTTERFLY NOTE"></a>BUTTERFLY NOTE</h1><h2 id="修改样式"><a href="#修改样式" class="headerlink" title="修改样式"></a>修改样式</h2><pre><code>由于替换了主页的index图片原来设置的滚动字幕sitesubtitle和菜单栏的颜色变模糊了,所以研究了一下要怎么修改。</code></pre><p>PUG文件相当于是一个个HTML的类。因为PUG其实就是原来的JADE文件。<br>观察themes主题里的source文件夹，里面有CSS,IMG,JS三个文件夹。整个主题的CSS就是在这个文件夹。在这个文件夹里搜索相关的CLASS就能够找到对应的样式。搜索site-sub-title就能找到他的样式在head.styl中，当中有color这个属性。color的变量值作者定义在var.styl中打开这个文件可以自己添加想要的变量。同样的菜单栏的样式side-page也在head.stle中。</p><h2 id="插件源码修改"><a href="#插件源码修改" class="headerlink" title="插件源码修改"></a>插件源码修改</h2><pre><code>因为打字效果subtitle的内容我改了所以想修改一下这个打字效果的属性。上网查看这个插件的代码属性然后搜索SUBTITLE在index.pug找到</code></pre><p>对应的设置:startdelay,typespeed.当然你也可以在这里添加这个插件的其他属性。</p><h2 id="插件测试"><a href="#插件测试" class="headerlink" title="插件测试"></a>插件测试</h2><div class="bili_video"><iframe src="//player.bilibili.com/player.html?aid=84292549" "" height="452" width="544" quality="high" allowfullscreen="true" scrolling="no" border="0" frameborder="no" framespacing="0"></iframe></div><h1 id="作者网站教程"><a href="#作者网站教程" class="headerlink" title="作者网站教程"></a>作者网站教程</h1><p><a href="https://butterfly.js.org/" target="_blank" rel="noopener">butterfly</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前言</title>
      <link href="/2020/01/18/hello-world/"/>
      <url>/2020/01/18/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="世事变改"><a href="#世事变改" class="headerlink" title="世事变改"></a>世事变改</h1><p>在csdn也有博客，不过荒废很久了。社会的现实，人生辗转。这个博客就来记录一些不一样的，多年的肥宅兴趣。</p><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>十多年下来真是阅片无数。越看越挑，而且看的品味也在变。活着就是改变。</p><h2 id="其他技术"><a href="#其他技术" class="headerlink" title="其他技术"></a>其他技术</h2><p>在CSDN的博客是刚毕业时候的技术总结主要是单片机，VC也有。这里有空还是总结下其他东西吧。</p><h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><p>生活中会有一些突然的想法感悟，决定写在这里了。</p><p>date: 2017-10-31 20:38:1date: 2017-10-31 20:38:17</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>后端mysql安装过程</title>
      <link href="/2020/01/18/mysql/"/>
      <url>/2020/01/18/mysql/</url>
      
        <content type="html"><![CDATA[<p>M</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
